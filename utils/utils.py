from newsapi import NewsApiClient
import os
from dotenv import load_dotenv
import json
from textblob import TextBlob
import google.generativeai as genai
import streamlit as st

# Init
load_dotenv()


def fetch_news(query,limit = 5):
    # api_key = os.getenv("NEWS_API_KEY")
    api_key = st.secrets["NEWS_API_KEY"]
    
    newsapi = NewsApiClient(api_key=api_key)

    # lowercase query
    query = query.lower()

    all_articles = newsapi.get_everything(q=query,
                                          language='en',
                                          sort_by='relevancy',
                                          page=2)

    return all_articles['articles'][:limit]

def generate_query(model, headline):
    """
    Generate a one-word query from a project headline using the Gemini AI model.
    
    Args:
        model: The initialized Gemini AI model.
        headline (str): The project headline.
    
    Returns:
        str: A one-word query generated by the AI.
    """
    if not model:
        return "Gemini model is not initialized. Please check your API key."

    try:
        # Prompt for the Gemini model
        prompt = f"""
        You are an AI assistant. Extract the most relevant two-word query from the following project headline:
        "{headline}"
        The query should be concise, meaningful, and related to the main topic of the headline.
        Example:
        AI in Healthcare -> AI Healthcare
        Climate Change Solutions -> Climate Solutions
        Advancements in Quantum Computing -> Quantum Computing
        The Future of Renewable Energy -> Renewable Energy
        The Rise of Electric Vehicles -> Electric Vehicles
        The Impact of Social Media on Society -> Social Media
        The Role of Artificial Intelligence in Business -> Artificial Intelligence
        The Evolution of Cybersecurity Threats -> Cybersecurity Threats
        The Importance of Mental Health Awareness -> Mental Health
        The Future of Space Exploration -> Space Exploration
        The Benefits of Remote Work -> Remote Work
        The Challenges of Globalization -> Globalization
        The Influence of Technology on Education -> Technology Education
        The Future of Cryptocurrency -> Cryptocurrency
        The Role of Big Data in Decision Making -> Big Data
        The Impact of Climate Change on Wildlife -> Climate Wildlife
        The Future of 3D Printing -> 3D Printing
        """
        
        # Generate response using the Gemini model
        response = model.generate_content(prompt)
        
        # Extract and return the generated query
        query = response.text.strip()
        return query.split()[0]  # Ensure it's a single word
    except Exception as e:
        return f"Error generating query: {e}"


def analyze_news_sentiment(news_text):
    """Analyze sentiment of news text"""
    if not news_text or not isinstance(news_text, str):
        # Return neutral sentiment if the text is None or not a string
        return 0.0
    blob = TextBlob(news_text)
    return blob.sentiment.polarity  # -1 to 1 (negative to positive)

def market_impact_on_project(project_type, sentiment_score):
    """Calculate market impact on project based on sentiment and project type"""
    # Different project types have different sensitivity to market sentiment
    sensitivity = {
        "Software Development": 0.4,
        "Infrastructure": 0.7,
        "Consulting": 0.6,
        "Maintenance": 0.3,
        "Research": 0.5
    }
    
    project_sensitivity = sensitivity.get(project_type, 0.5)
    # Convert sentiment (-1 to 1) to risk impact (0 to 30)
    # Negative sentiment increases risk, positive sentiment decreases risk
    impact = ((-sentiment_score) * project_sensitivity) * 30
    
    # Ensure impact is between 0 and 30
    return max(0, min(30, impact))


def create_master_news_list(df_projects, gemini_model):
    """Create a master news list for all projects"""
    master_news = {}
    
    for idx, row in df_projects.iterrows():
        project_name = row["project"]
        
        # Generate a query for the project headline
        query = generate_query(gemini_model, project_name)
        print(f"Generated Query for {project_name}: {query}")
        
        if query:
            # Fetch news articles related to the project
            project_news = fetch_news(query)
            
            # Analyze sentiment of fetched news articles
            for article in project_news:
                article["sentiment"] = analyze_news_sentiment(article.get("description", ""))
                article["sentiment_label"] = "Positive" if article["sentiment"] > 0.05 else "Negative" if article["sentiment"] < -0.05 else "Neutral"
            
            # Store in master news dictionary
            master_news[project_name] = project_news
    
    return master_news



